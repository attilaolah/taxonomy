load("@io_bazel_rules_closure//closure:defs.bzl", "closure_js_binary", "closure_js_library")
load("@npm//@bazel/typescript:index.bzl", "ts_project")
load(":javascript_target.bzl", "JS_TARGET", "TS_TARGET")
load(":javascript.bzl", "iife")
load("//config:compilation_mode.bzl", "COMPILATION_MODES")
load("//tools:slim_lib.bzl", "slim_lib")

closure_js_binary(
    name = "app",
    language = JS_TARGET,
    visibility = ["//:__pkg__"],
    deps = [":app_lib"],
)

closure_js_library(
    name = "app_lib",
    srcs = [":app_iife"],
    no_closure_library = True,
    suppress = [
        # Closure Compiler currently does not consume TypeScript .d.ts inputs.
        # Therefore it has no clue about the types, so we disable some optimisations.
        "JSC_UNKNOWN_EXPR_TYPE",
    ],
)

iife(
    name = "app_iife",
    srcs = [":app_ts"],
    replace = {
        "let importJS;": "",
        "importJS": "import",
    },
)

ts_project(
    name = "app_ts",
    # The type hints must come first, then compilation mode.
    srcs = [
        "type_hints.ts",
        ":compilation_mode_ts",
    ] + [
        "bootstrap.ts",
        "main.ts",
        "table_filter.ts",
        "inaturalist_sync.ts",
    ],
    tsconfig = {"compilerOptions": {
        "target": TS_TARGET,
        "esModuleInterop": True,
        "module": "commonjs",
    }},
    deps = [
        "@npm//@types/node",
        "@npm//@types/tabulator-tables",
    ],
)

filegroup(
    name = "compilation_mode_ts",
    srcs = select({
        "//config:" + mode: ["compilation_mode_{}.ts".format(mode)]
        for mode in COMPILATION_MODES
    }),
)

slim_lib(
    name = "layout",
    srcs = ["layout.slim"],
    visibility = ["//:__pkg__"],
)
